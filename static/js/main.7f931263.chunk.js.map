{"version":3,"sources":["app/httpClient.js","features/github-users/usersSlice.js","features/github-repositories/repositoriesSlice.js","app/store.js","components/search-bar/SearchBar.js","features/github-profiles/RepositoryPreview.js","features/github-profiles/CollapsibleProfileItem.js","features/github-profiles/GithubProfilesContainer.js","app/App.js","features/github-profiles/GithubProfilesPage.js","serviceWorker.js","index.js"],"names":["httpClient","axios","create","baseURL","timeout","headers","Accept","fetchUsers","createAsyncThunk","username","a","get","params","q","type","per_page","response","data","items","usersSlice","createSlice","name","initialState","entities","loading","reducers","extraReducers","fulfilled","state","action","status","concat","payload","fetchRepositories","userLogin","repositoriesSlice","store","configureStore","reducer","users","usersReducer","repositories","repositoriesReducer","SearchBar","onClick","inputRef","React","createRef","className","onSubmit","e","preventDefault","current","value","placeholder","ref","RepositoryPreview","repositoryId","description","starsCount","console","log","StartIcn","StarIcon","StarBorderIcon","defaultProps","CollapsibleProfileItem","user","dispatch","useDispatch","useSelector","useState","isOpen","setIsOpen","login","Array","isArray","map","id","stargazers_count","GithubProfilesContainer","routerBaseName","GithubProfilesPage","App","basename","path","component","exact","to","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4ZAOaA,E,OAAaC,EAAMC,OAAO,CACrCC,QANe,yBAOfC,QAAS,IACTC,QAPsB,CACtBC,OAAQ,oCCDGC,EAAaC,YACxB,mBADwC,uCAExC,WAAOC,GAAP,eAAAC,EAAA,sEACyBV,EAAWW,IAAI,eAAgB,CACpDC,OAAQ,CACNC,EAAE,GAAD,OAAKJ,EAAL,aACDK,KAAM,QACNC,SAAU,KALhB,cACQC,EADR,yBASSA,EAASC,KAAKC,OATvB,2CAFwC,uDA2B3BC,EAZIC,YAAY,CAC7BC,KAAM,QACNC,aAAc,CAAEC,SAAU,GAAIC,QAAS,QACvCC,SAAU,GACVC,cAAc,eACXnB,EAAWoB,WAAY,SAACC,EAAOC,GAC9BD,EAAME,OAAS,YACfF,EAAML,SAAWK,EAAML,SAASQ,OAAOF,EAAOG,cAKpD,QC3BaC,EAAoBzB,YAC/B,iCAD+C,uCAE/C,WAAO0B,GAAP,eAAAxB,EAAA,sEACyBV,EAAWW,IAAX,iBAAyBuB,EAAzB,WADzB,cACQlB,EADR,yBAGSA,EAASC,MAHlB,2CAF+C,uDAqBlCkB,EAZWf,YAAY,CACpCC,KAAM,eACNC,aAAc,CAAEC,SAAU,GAAIC,QAAS,QACvCC,SAAU,GACVC,cAAc,eACXO,EAAkBN,WAAY,SAACC,EAAOC,GACrCD,EAAME,OAAS,YACfF,EAAML,SAAWK,EAAML,SAASQ,OAAOF,EAAOG,cAKpD,QCpBaI,EAAQC,YAAe,CAClCC,QAAS,CACPC,MAAOC,EACPC,aAAcC,K,eCHX,SAASC,EAAT,GAAiC,IAAZC,EAAW,EAAXA,QACpBC,EAAWC,IAAMC,YAQvB,OACE,qBAAKC,UAAU,wBAAf,SACE,uBAAMA,UAAU,mBAAmBC,SARhB,SAACC,GACtBA,EAAEC,iBAEFP,EAAQC,EAASO,QAAQC,QAKvB,UACE,uBACEL,UAAU,cACVM,YAAY,iBACZxC,KAAK,OACLO,KAAK,iBACLkC,IAAKV,IAEP,uBAAOG,UAAU,eAAelC,KAAK,SAASuC,MAAM,gB,8CChB/CG,G,MAAoB,SAAC,GAK5B,EAJJC,aAIK,IAHLpC,EAGI,EAHJA,KACAqC,EAEI,EAFJA,YACAC,EACI,EADJA,WAEAC,QAAQC,IAAI,aAAcF,GAC1B,IAAMG,EAAWH,EAAa,EAAII,IAAWC,IAE7C,OACE,qBAAKhB,UAAU,cAAf,SACE,sBAAKA,UAAU,OAAf,UACE,sBAAKA,UAAU,QAAf,UACE,4BAAI3B,IACJ,sBAAK2B,UAAU,QAAf,UACE,+BAAOW,IADT,IAC4B,cAACG,EAAD,UAG9B,mBAAGd,UAAU,cAAb,SAA4BU,WAapCF,EAAkBS,aAAe,CAC/BN,WAAY,G,sCC7BDO,G,MAAyB,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACjCC,EAAWC,cACX5B,EAAe6B,aAAY,SAAC1C,GAAD,OAAWA,EAAMa,aAAalB,YAC/D,EAA4BgD,oBAAS,GAArC,mBAAOC,EAAP,KAAeC,EAAf,KASA,OACE,sBAAKzB,UAAU,oBAAf,UACE,sBAAKA,UAAU,yBAAyBJ,QATxB,WACb4B,GACHJ,EAASnC,EAAkBkC,EAAKO,QAElCD,GAAWD,IAKT,UACE,+BAAOL,EAAKO,QACXF,EAAS,cAAC,IAAD,IAAqB,cAAC,IAAD,OAEhCA,GACC,qBAAKxB,UAAU,mBAAf,SACG2B,MAAMC,QAAQnC,IACbA,EAAaoC,KAAI,YAAkD,IAA/CC,EAA8C,EAA9CA,GAAIzD,EAA0C,EAA1CA,KAAMqC,EAAoC,EAApCA,YAAaqB,EAAuB,EAAvBA,iBACzC,OACE,cAAC,EAAD,CAEEtB,aAAcqB,EACdzD,KAAMA,EACNqC,YAAaA,EACbC,WAAYoB,GAJPD,a,MC1BhB,SAASE,IACd,IAAMZ,EAAWC,cACX9B,EAAQ+B,aAAY,SAAC1C,GAAD,OAAWA,EAAMW,MAAMhB,YAMjD,OACE,sBAAKyB,UAAU,0BAAf,UACE,cAACL,EAAD,CAAWC,QANM,SAACnC,GACpB2D,EAAS7D,EAAWE,OAMlB,qBAAKuC,UAAU,iBAAf,SACG2B,MAAMC,QAAQrC,IACbA,EAAMsC,KAAI,SAACV,GACT,OAAO,cAAC,EAAD,CAAsCA,KAAMA,GAAfA,EAAKW,Y,ICVjDG,E,MCRG,SAASC,IACd,OACE,qBAAKlC,UAAU,qBAAf,SACE,cAAC,EAAD,MDQJiC,EAAiB,yBAoBJE,MAjBf,WACE,OACE,cAAC,IAAD,CAAQC,SAAUH,EAAlB,SACE,cAAC,IAAD,CAAU7C,MAAOA,EAAjB,SACE,qBAAKY,UAAU,MAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOqC,KAAK,mBAAmBC,UAAWJ,IAC1C,cAAC,IAAD,CAAOG,KAAK,IAAIE,OAAK,EAArB,SACE,cAAC,IAAD,CAAUC,GAAG,iCEdPC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.7f931263.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.github.com';\nconst DEFAULT_HEADERS = {\n  Accept: 'application/vnd.github.v3+json',\n};\n\nexport const httpClient = axios.create({\n  baseURL: BASE_URL,\n  timeout: 30000,\n  headers: DEFAULT_HEADERS,\n});\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { httpClient } from '../../app/httpClient';\n\nexport const fetchUsers = createAsyncThunk(\n  'users/fetchUsers',\n  async (username) => {\n    const response = await httpClient.get('search/users', {\n      params: {\n        q: `${username} in:login`,\n        type: 'Users',\n        per_page: 5,\n      },\n    });\n\n    return response.data.items;\n  }\n);\n\nconst usersSlice = createSlice({\n  name: 'users',\n  initialState: { entities: [], loading: 'idle' },\n  reducers: {},\n  extraReducers: {\n    [fetchUsers.fulfilled]: (state, action) => {\n      state.status = 'succeeded';\n      state.entities = state.entities.concat(action.payload);\n    },\n  },\n});\n\nexport default usersSlice.reducer;\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { httpClient } from '../../app/httpClient';\n\nexport const fetchRepositories = createAsyncThunk(\n  'repositories/fetchRepositories',\n  async (userLogin) => {\n    const response = await httpClient.get(`/users/${userLogin}/repos`);\n\n    return response.data;\n  }\n);\n\nconst repositoriesSlice = createSlice({\n  name: 'repositories',\n  initialState: { entities: [], loading: 'idle' },\n  reducers: {},\n  extraReducers: {\n    [fetchRepositories.fulfilled]: (state, action) => {\n      state.status = 'succeeded';\n      state.entities = state.entities.concat(action.payload);\n    },\n  },\n});\n\nexport default repositoriesSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport usersReducer from '../features/github-users/usersSlice';\nimport repositoriesReducer from '../features/github-repositories/repositoriesSlice';\n\nexport const store = configureStore({\n  reducer: {\n    users: usersReducer,\n    repositories: repositoriesReducer,\n  },\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './styles.css';\n\nexport function SearchBar({ onClick }) {\n  const inputRef = React.createRef();\n\n  const handleOnSubmit = (e) => {\n    e.preventDefault();\n\n    onClick(inputRef.current.value);\n  };\n\n  return (\n    <div className=\"search-bar__container\">\n      <form className=\"search-bar__form\" onSubmit={handleOnSubmit}>\n        <input\n          className=\"form__input\"\n          placeholder=\"Enter username\"\n          type=\"text\"\n          name=\"username-input\"\n          ref={inputRef}\n        />\n        <input className=\"form__button\" type=\"submit\" value=\"Search\" />\n      </form>\n    </div>\n  );\n}\n\nSearchBar.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\nimport StarIcon from '@material-ui/icons/Star';\n\nimport './RepositoryPreview.css';\n\nexport const RepositoryPreview = ({\n  repositoryId,\n  name,\n  description,\n  starsCount,\n}) => {\n  console.log('starsCount', starsCount);\n  const StartIcn = starsCount > 0 ? StarIcon : StarBorderIcon;\n\n  return (\n    <div className=\"previewItem\">\n      <div className=\"info\">\n        <div className=\"title\">\n          <p>{name}</p>\n          <div className=\"stars\">\n            <span>{starsCount}</span> <StartIcn />\n          </div>\n        </div>\n        <p className=\"description\">{description}</p>\n      </div>\n    </div>\n  );\n};\n\nRepositoryPreview.propTypes = {\n  repositoryId: PropTypes.number.isRequired,\n  name: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  starsCount: PropTypes.number,\n};\n\nRepositoryPreview.defaultProps = {\n  starsCount: 0,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchRepositories } from '../github-repositories/repositoriesSlice';\nimport { RepositoryPreview } from './RepositoryPreview';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\n\nimport './CollapsibleProfileItem.css';\n\nexport const CollapsibleProfileItem = ({ user }) => {\n  const dispatch = useDispatch();\n  const repositories = useSelector((state) => state.repositories.entities);\n  const [isOpen, setIsOpen] = useState(false);\n\n  const handleClick = () => {\n    if (!isOpen) {\n      dispatch(fetchRepositories(user.login));\n    }\n    setIsOpen(!isOpen);\n  };\n\n  return (\n    <div className=\"profile-container\">\n      <div className=\"clickable-profile-item\" onClick={handleClick}>\n        <span>{user.login}</span>\n        {isOpen ? <ExpandLessIcon /> : <ExpandMoreIcon />}\n      </div>\n      {isOpen && (\n        <div className=\"repositoriesList\">\n          {Array.isArray(repositories) &&\n            repositories.map(({ id, name, description, stargazers_count }) => {\n              return (\n                <RepositoryPreview\n                  key={id}\n                  repositoryId={id}\n                  name={name}\n                  description={description}\n                  starsCount={stargazers_count}\n                />\n              );\n            })}\n        </div>\n      )}\n    </div>\n  );\n};\n\nCollapsibleProfileItem.propTypes = {\n  user: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    login: PropTypes.string.isRequired,\n  }),\n};\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchUsers } from '../github-users/usersSlice';\nimport { SearchBar } from '../../components/search-bar';\nimport { CollapsibleProfileItem } from './CollapsibleProfileItem';\n\nimport './GithubProfilesContainer.css';\n\nexport function GithubProfilesContainer() {\n  const dispatch = useDispatch();\n  const users = useSelector((state) => state.users.entities);\n\n  const handleSearch = (username) => {\n    dispatch(fetchUsers(username));\n  };\n\n  return (\n    <div className=\"githubProfilesContainer\">\n      <SearchBar onClick={handleSearch} />\n      <div className=\"expandableList\">\n        {Array.isArray(users) &&\n          users.map((user) => {\n            return <CollapsibleProfileItem key={user.id} user={user} />;\n          })}\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Redirect,\n  Route,\n} from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport './App.css';\nimport { store } from './store';\nimport { GithubProfilesPage } from '../features/github-profiles/GithubProfilesPage';\n\nlet routerBaseName;\n\nif (process.env.NODE_ENV !== 'development') {\n  routerBaseName = '/profile-search-sample';\n}\n\nfunction App() {\n  return (\n    <Router basename={routerBaseName}>\n      <Provider store={store}>\n        <div className=\"App\">\n          <Switch>\n            <Route path=\"/github-profiles\" component={GithubProfilesPage} />\n            <Route path=\"/\" exact>\n              <Redirect to=\"/github-profiles\" />\n            </Route>\n          </Switch>\n        </div>\n      </Provider>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport { GithubProfilesContainer } from './GithubProfilesContainer';\nimport './GithubProfilesPage.css';\n\nexport function GithubProfilesPage() {\n  return (\n    <div className=\"GithubProfilesPage\">\n      <GithubProfilesContainer />\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}